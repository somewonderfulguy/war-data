/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PerpetuaImport } from './routes/perpetua'
import { Route as LocaleImport } from './routes/$locale'
import { Route as IndexImport } from './routes/index'
import { Route as LocalePerpetuaImport } from './routes/$locale.perpetua'

// Create/Update Routes

const PerpetuaRoute = PerpetuaImport.update({
  id: '/perpetua',
  path: '/perpetua',
  getParentRoute: () => rootRoute,
} as any)

const LocaleRoute = LocaleImport.update({
  id: '/$locale',
  path: '/$locale',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LocalePerpetuaRoute = LocalePerpetuaImport.update({
  id: '/perpetua',
  path: '/perpetua',
  getParentRoute: () => LocaleRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$locale': {
      id: '/$locale'
      path: '/$locale'
      fullPath: '/$locale'
      preLoaderRoute: typeof LocaleImport
      parentRoute: typeof rootRoute
    }
    '/perpetua': {
      id: '/perpetua'
      path: '/perpetua'
      fullPath: '/perpetua'
      preLoaderRoute: typeof PerpetuaImport
      parentRoute: typeof rootRoute
    }
    '/$locale/perpetua': {
      id: '/$locale/perpetua'
      path: '/perpetua'
      fullPath: '/$locale/perpetua'
      preLoaderRoute: typeof LocalePerpetuaImport
      parentRoute: typeof LocaleImport
    }
  }
}

// Create and export the route tree

interface LocaleRouteChildren {
  LocalePerpetuaRoute: typeof LocalePerpetuaRoute
}

const LocaleRouteChildren: LocaleRouteChildren = {
  LocalePerpetuaRoute: LocalePerpetuaRoute,
}

const LocaleRouteWithChildren =
  LocaleRoute._addFileChildren(LocaleRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$locale': typeof LocaleRouteWithChildren
  '/perpetua': typeof PerpetuaRoute
  '/$locale/perpetua': typeof LocalePerpetuaRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$locale': typeof LocaleRouteWithChildren
  '/perpetua': typeof PerpetuaRoute
  '/$locale/perpetua': typeof LocalePerpetuaRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$locale': typeof LocaleRouteWithChildren
  '/perpetua': typeof PerpetuaRoute
  '/$locale/perpetua': typeof LocalePerpetuaRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/$locale' | '/perpetua' | '/$locale/perpetua'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$locale' | '/perpetua' | '/$locale/perpetua'
  id: '__root__' | '/' | '/$locale' | '/perpetua' | '/$locale/perpetua'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LocaleRoute: typeof LocaleRouteWithChildren
  PerpetuaRoute: typeof PerpetuaRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LocaleRoute: LocaleRouteWithChildren,
  PerpetuaRoute: PerpetuaRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$locale",
        "/perpetua"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$locale": {
      "filePath": "$locale.tsx",
      "children": [
        "/$locale/perpetua"
      ]
    },
    "/perpetua": {
      "filePath": "perpetua.tsx"
    },
    "/$locale/perpetua": {
      "filePath": "$locale.perpetua.tsx",
      "parent": "/$locale"
    }
  }
}
ROUTE_MANIFEST_END */
